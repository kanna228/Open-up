# Blog Platform

Это проект платформы блога, разработанный с использованием Node.js, Express.js и MongoDB (Mongoose). В приложении реализованы функции регистрации, авторизации, создания, редактирования и удаления постов, а также просмотр профилей пользователей и поиск по списку пользователей. Дополнительно предусмотрены административные возможности для удаления любых постов и пользователей.

---

## Features

- **Регистрация и авторизация пользователей**  
  - Пользователи могут регистрироваться с именем, фамилией, возрастом, email и паролем (пароли хранятся в зашифрованном виде с использованием bcrypt).  
  - Аутентификация осуществляется через JWT, который хранится в HTTP-only cookie.
  
- **Профиль пользователя**  
  - Просмотр и редактирование профиля: изменение данных, добавление информации о себе.
  - Возможность создания постов с загрузкой изображений. Изображения сохраняются на сервере в папке `add/{postId}/`.

- **Управление постами**  
  - Пользователи могут создавать, редактировать и удалять свои посты.
  - Посты отображаются на странице с сортировкой по дате создания (новейшие сверху).
  - Администратор может удалять любой пост независимо от владельца.

- **Просмотр профилей**  
  - Пользователи могут просматривать профили других пользователей через `/profile-view/{id}`.
  - В списке всех постов имя автора является кликабельным и ведёт на страницу просмотра профиля.

- **Страница "Люди рядом"**  
  - Отображается список всех пользователей с возможностью поиска по имени и фамилии.
  - Текущий пользователь (залогиненный) отображается в начале списка с пометкой "Это ВЫ".
  - Администратор имеет возможность удалить пользователя по ObjectId.

- **Административные функции**  
  - Администратор (role: "admin") имеет дополнительные возможности, такие как удаление любых постов и пользователей.

- **Валидация и обработка ошибок**  
  - Входные данные валидируются с использованием middleware (например, через Joi или Validator.js).
  - Глобальный обработчик ошибок возвращает понятные сообщения с соответствующими HTTP статус-кодами (400, 401, 403, 404, 500).

---

## Setup Instructions

1. Клонируйте репозиторий:

   ```bash
   git clone https://github.com/kanna228/final-WEB-2

2. Установите зависимости:
    npm install

3. Создайте файл .env в корне проекта и добавьте следующие переменные:
    MONGO_URI=your_mongodb_connection_string
    JWT_SECRET=your_secret_key
    PORT=3000

4. Выполните команду:
    node server.js

Приложение будет доступно на http://localhost:3000.

API Documentation


Authentication
POST /register
Регистрирует нового пользователя.
Параметры запроса (JSON или form-data):
    name (String, required)
    surname (String, required)
    age (Number, required)
    email (String, required, уникальный)
    password (String, required)
POST /login
Аутентифицирует пользователя и возвращает JWT, устанавливаемый в cookie.
Параметры запроса:
    email (String, required)
    password (String, required)


User Management
GET /profile/:id
Отображает профиль пользователя с возможностью редактирования (если это ваш профиль).

GET /profile-view/:id
Отображает профиль пользователя для просмотра без возможности редактирования.

POST /profile/:id/edit
Обновляет данные профиля пользователя.
Параметры запроса:
    name, surname, age, email, password (опционально, если хотите сменить)
    user_info (String)


Post Management
GET /post/create/:id
Отображает форму создания поста для пользователя с заданным id.

POST /post/create/:id
Создает новый пост с возможностью загрузки изображения.
Параметры запроса:
    title (String, required)
    main_info (String, required)
    image (файл, опционально)
Изображения сохраняются в папке add/{postId}/.
GET /post/edit/:id
Отображает форму редактирования поста.

POST /post/edit/:id
Обновляет данные поста. Если указан флажок для удаления изображения, то удаляет папку add/{postId} и обновляет флаг media.

GET /post/delete/:id
Удаляет пост (если владелец или админ). При удалении также удаляется папка add/{postId} с медиафайлами.

GET /posts
Отображает страницу со всеми постами, отсортированными по дате создания (новейшие сверху). Каждый пост содержит информацию об авторе (имя, фамилия), текст поста и медиа (если есть).
Для админа отображаются кнопки редактирования и удаления.

People Near
GET /people-near
Отображает список всех пользователей.
Дополнительно есть строка поиска для фильтрации по имени и фамилии.
Текущий пользователь отображается первым с меткой "Это ВЫ".
Параметры запроса:
    q (опционально, строка для поиска)


Admin Functions
POST /admin/delete-user
Удаляет пользователя по указанному ObjectId и все его посты.
Параметры запроса:
    userId (String, required)
Также, в интерфейсе администратора в профиле есть форма поиска для удаления пользователя по ObjectId.

Technologies:
    Backend: Node.js, Express.js
    Database: MongoDB (MongoDB Atlas), Mongoose
    Authentication: JWT (jsonwebtoken)
    File Upload: Multer
    Security: bcrypt для хэширования паролей
    Templating: EJS
    Styling: CSS



Project Structure:
/project-root
├── /config
│   └── db.js                # Подключение к MongoDB
├── /middlewares
│   └── authenticate.js      # Middleware для аутентификации и установки currentUser
├── /models
│   ├── user.js              # Модель пользователя
│   └── post.js              # Модель поста
├── /public
│   ├── /css
│   │   ├── styles.css       # Общие стили
│   │   ├── profile.css      # Стили для страницы профиля
│   │   ├── allPosts.css     # Стили для страницы всех постов
│   │   └── ...              # Другие CSS файлы
├── /routes
│   ├── home.js              # Маршруты главной страницы
│   ├── login.js             # Маршруты аутентификации
│   ├── register.js          # Маршруты регистрации
│   ├── logout.js            # Маршруты выхода
│   ├── profile.js           # Маршруты профиля (редактирование)
│   ├── profile-view.js      # Маршруты просмотра профиля
│   ├── post.js              # Маршруты управления постами (создание, редактирование, удаление, просмотр)
│   ├── people-near.js       # Маршруты страницы "Люди рядом"
│   └── admin.js             # Маршруты административных функций (удаление пользователя и его постов)
├── /views
│   ├── /partials
│   │   └── header.ejs       # Шаблон хедера
│   ├── login.ejs            # Шаблон страницы логина
│   ├── register.ejs         # Шаблон страницы регистрации
│   ├── profile.ejs          # Шаблон страницы профиля (редактирование)
│   ├── profile-view.ejs     # Шаблон просмотра чужого профиля
│   ├── createPost.ejs       # Шаблон создания поста
│   ├── editPost.ejs         # Шаблон редактирования поста
│   └── allPosts.ejs         # Шаблон страницы со всеми постами
├── /add                     # Папка для хранения изображений постов, организованная по subfolder {postId}
├── /temp                    # Временная папка для загрузки файлов с multer
├── .env                     # Файл переменных окружения
├── package.json
└── server.js                # Основной файл сервера

Conclusion
Этот проект предоставляет полнофункциональную платформу блога с регистрацией, авторизацией, CRUD операциями для постов, функционалом просмотра профилей, поиском пользователей и административными возможностями. Приложение построено по модульной структуре, что облегчает масштабирование и поддержку кода.

Ссылка на проект:
https://open-up-production.up.railway.app/
